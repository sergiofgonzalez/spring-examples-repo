<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<parent>
		<groupId>org.joolzminer</groupId>
		<artifactId>chapter-06-authenticating-users</artifactId>
		<version>1.0.0-SNAPSHOT</version>
	</parent>
	
	<artifactId>004-db-backed-user-repo</artifactId>
	
	<packaging>war</packaging>
	
	<name>|---- 004-db-backed-user-repo</name>
	<description>
		This is the fourth example of SiP Chapter 6 - Authenticating Users:
			Sourcing user data from a database.
		It has been migrated to Spring Boot and Java Config.
				
		Functionality:
		No changes. The implementation of the user database is now backed by MySQL
		but the functionality has not changed.

		
		Components (changed/added over 003-):
		
		application.yml:
		The application configuration but written in YAML instead of as a properties
		file.
		This allows for a more structured listing of properties with sections and
		subsections.
		
		DatabaseConfig:
		The Database configuration class. It defines the datasource, the connection pool
		and submits to the database a creation and insertion SQL script.
		The connection pool is set to HikariCP, and the DataSource Initializer is
		manually created (instead of using the one provided by Spring Boot), to be able
		to have more control over the population of the database.
		
		sql/create-schema.sql:
		The creation of the tables in which JDBC Authentication will be based. In this
		version, the tables are exactly as Spring expects, and therefore, the 
		SecurityConfig will have no further configuration apart from the datasource. 
		
		sql/insert-data.sql
		The insertion of the users and its authorities.
		
		SecurityConfig.java:
		The inMemoryAuthentication has changed to jdbcAuthentication. Note that the
		configuration is minimal because the tables user and authorities are created 
		exactly as Spring expects them.
		The queries that Spring Security submits are:
			SELECT username, password, enabled FROM users WHERE username = ?
			SELECT username, authority FROM authorities WHERE username = ?
	</description>
		
	
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
			<version>3.2.3.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
			<version>1.3.8</version>
			<exclusions>
				<exclusion>
					<groupId>com.sun</groupId>
					<artifactId>tools</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            </dependency>				
	</dependencies>
	
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
  	
</project>